---
# 셸 스크립트 1단계: 시스템 업데이트. changed_when: false는 apt가 변경사항 없다고 해도 'changed'로 표시하지 않게 합니다.
- name: apt 패키지 목록 업데이트 및 시스템 업그레이드
  ansible.builtin.apt:
    update_cache: yes
    upgrade: 'yes'
    cache_valid_time: 3600 # 1시간 동안 캐시 유지
  changed_when: false

# 셸 스크립트 2단계: 스왑 비활성화. 멱등성을 위해 command와 mount 모듈을 함께 사용합니다.
- name: 현재 세션에서 스왑 비활성화
  ansible.builtin.command: swapoff -a
  when: ansible_swaptotal_mb > 0 # 스왑이 활성화 되어 있을 때만 실행

- name: fstab에서 스왑 파티션 비활성화 (주석 처리)
  ansible.posix.mount:
    name: none
    src: swap
    fstype: swap
    state: absent # fstab에 swap 항목이 없도록 보장합니다.

# 셸 스크립트 3단계: 커널 모듈 로드 및 sysctl 설정. 각 모듈은 멱등성을 보장합니다.
- name: K8s에 필요한 커널 모듈(overlay, br_netfilter) 로드
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: 시스템 부팅 시 커널 모듈이 자동 로드되도록 설정
  ansible.builtin.copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter

- name: K8s 네트워킹을 위한 sysctl 파라미터 설정
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_file: /etc/sysctl.d/k8s.conf
    reload: yes
  loop:
    - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { key: 'net.ipv4.ip_forward', value: '1' }

# 셸 스크립트 4단계: containerd 설치 및 설정. 멱등성을 위해 creates와 lineinfile을 사용합니다.
- name: containerd 설치
  ansible.builtin.apt:
    name: containerd
    state: present

- name: containerd 설정 디렉토리 생성
  ansible.builtin.file:
    path: /etc/containerd
    state: directory

- name: containerd 기본 설정 파일 생성
  # command 모듈을 shell 모듈로 바꾸고, 파일로 저장하는 리다이렉션(>)을 추가합니다.
  ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
  args:
    # 멱등성을 위해 'creates'는 그대로 둡니다.
    creates: /etc/containerd/config.toml

- name: containerd가 cgroup driver로 systemd를 사용하도록 설정
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    regexp: '            SystemdCgroup = false'
    line: '            SystemdCgroup = true'
    backrefs: yes # regexp에 맞는 라인을 찾았을 때만 변경

- name: containerd 서비스 재시작 및 활성화
  ansible.builtin.systemd:
    name: containerd
    state: restarted
    enabled: yes
    daemon_reload: yes

# 셸 스크립트 5단계: 쿠버네티스 패키지 설치
- name: 쿠버네티스 apt GPG 키 다운로드
  ansible.builtin.get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key
    dest: /tmp/kubernetes-apt-keyring.asc

- name: GPG 키 dearmor
  ansible.builtin.command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-apt-keyring.asc
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: 쿠버네티스 apt 저장소 추가
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"
    state: present
    filename: kubernetes

- name: kubeadm, kubelet, kubectl 설치
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop:
    - kubeadm
    - kubelet
    - kubectl

- name: 쿠버네티스 패키지 버전 고정 (자동 업데이트 방지)
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubeadm
    - kubelet
    - kubectl

# /etc/hosts 관련 설정
- name: /etc/hosts 파일에서 잘못된 루프백 항목(localhost) 제거
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: '^127\.0\.0\.1\s+localhost\s+{{ inventory_hostname }}$'
    state: absent
    
- name: /etc/hosts 파일에서 잘못된 퍼블릭 IP 항목 제거
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: '^{{ ansible_host }}.*$'
    state: absent

- name: /etc/hosts 파일에 모든 K8s 노드의 Private IP 등록
  ansible.builtin.blockinfile:
    path: /etc/hosts
    block: |
      # --- Ansible Managed K8s Hosts ---
      {% for host in groups['all'] %}
      {{ hostvars[host]['ansible_default_ipv4']['address'] }} {{ hostvars[host]['inventory_hostname'] }}
      {% endfor %}
      # --- End Ansible Managed K8s Hosts ---
    marker: "# {mark} ANSIBLE MANAGED K8s CLUSTER BLOCK"
